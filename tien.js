const { Client, GatewayIntentBits } = require("discord.js");
const fs = require("fs");

// ================== CONFIG ==================
const TOKEN = "MTQxNzg4OTM1ODQxNzEwNDk2Ng.GrTc_h.c2m2qrAP0uOzHRjOQcFzM7zFgfTCwuA3eXq3PA"; // üîë Thay b·∫±ng token bot c·ªßa b·∫°n
const CHANNEL_ID = "1418100033466667122"; // üè† ID k√™nh chat
// =============================================

// T·∫°o client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
});

// ƒê·ªçc d·ªØ li·ªáu s·ªë d∆∞
let balances = {};
if (fs.existsSync("balances.json")) {
    balances = JSON.parse(fs.readFileSync("balances.json"));
}

// L∆∞u d·ªØ li·ªáu s·ªë d∆∞
function saveBalances() {
    fs.writeFileSync("balances.json", JSON.stringify(balances, null, 2));
}

// Th√™m ti·ªÅn
function addBalance(userId, amount) {
    if (!balances[userId]) balances[userId] = 0;
    balances[userId] += amount;
    saveBalances();
}

// Tr·ª´ ti·ªÅn
function removeBalance(userId, amount) {
    if (!balances[userId]) balances[userId] = 0;
    balances[userId] -= amount;
    if (balances[userId] < 0) balances[userId] = 0;
    saveBalances();
}

// Random slot (3 √¥ b·∫•t k·ª≥)
function spinSlot() {
    const symbols = ["üçí", "üçã", "üçâ", "üçá", "‚≠ê", "7Ô∏è‚É£"];
    return [
        symbols[Math.floor(Math.random() * symbols.length)],
        symbols[Math.floor(Math.random() * symbols.length)],
        symbols[Math.floor(Math.random() * symbols.length)],
    ];
}

// Khi bot s·∫µn s√†ng
client.once("ready", () => {
    console.log(`‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n: ${client.user.tag}`);
});

// X·ª≠ l√Ω l·ªánh
client.on("messageCreate", async (message) => {
    if (message.author.bot) return;
    if (message.channel.id !== CHANNEL_ID) return;

    const args = message.content.split(" ");
    const cmd = args[0].toLowerCase();

    // Xem s·ªë d∆∞
    if (cmd === "!balance" || cmd === "!sodu") {
        const bal = balances[message.author.id] || 0;
        return message.reply(`üí∞ S·ªë d∆∞ c·ªßa b·∫°n: **${bal} xu**`);
    }

    // C·ªông ti·ªÅn (test nhanh)
    if (cmd === "!addmoney") {
        const amount = parseInt(args[1]);
        if (isNaN(amount)) return message.reply("‚ùå C√∫ ph√°p: `!addmoney <s·ªë ti·ªÅn>`");

        addBalance(message.author.id, amount);
        return message.reply(`‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c c·ªông **${amount} xu**`);
    }

    // Slot machine
    if (cmd === "!slot") {
        const bet = parseInt(args[1]);
        if (isNaN(bet) || bet < 500) {
            return message.reply("‚ö†Ô∏è C∆∞·ª£c t·ªëi thi·ªÉu l√† **500 xu**");
        }

        const bal = balances[message.author.id] || 0;
        if (bal < bet) return message.reply("‚ùå B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ch∆°i.");

        removeBalance(message.author.id, bet);

        const result = spinSlot();
        let reward = 0;
        let msg = `üé∞ ${result.join(" | ")} üé∞\n`;

        // N·∫øu c·∫£ 3 gi·ªëng nhau
        if (result[0] === result[1] && result[1] === result[2]) {
            if (Math.random() < 1) { // 15% Jackpot
                reward = bet * 3;
                msg += `üéâ Jackpot! B·∫°n th·∫Øng **${reward} xu** (x3)!`;
            } else {
                msg += `üíÄ Su√Ωt tr√∫ng Jackpot nh∆∞ng x·ªãt r·ªìi üò≠. M·∫•t **${bet} xu**.`;
            }
        } else {
            msg += `üíÄ Thua r·ªìi! M·∫•t **${bet} xu**.`;
        }

        addBalance(message.author.id, reward);
        return message.reply(msg);
    }
});

// Login bot
client.login(TOKEN);